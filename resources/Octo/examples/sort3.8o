###########################################
#
#  An Octo implementation of an unusual
#  sorting algorithm which combines an
#  optimal sorting network and a merge pass.
#  This implementation is designed to sort
#  exactly 16 items. The 'sort-8' subroutine
#  can be used alone to sort the values
#  stored in the bottom 8 registers.
#
###########################################

: sort-8
	# compare-and-swap:
	:macro cas A B {
		if A > B begin
			vf := A
			A  := B
			B  := vf
		end
	}
	
	cas v0 v1
	cas v2 v3
	cas v4 v5
	cas v6 v7
	cas v0 v2
	cas v4 v6
	cas v1 v3
	cas v0 v4
	cas v5 v7
	cas v3 v7
	cas v1 v5
	cas v3 v5
	cas v2 v6
	cas v2 v4
	cas v1 v2
	cas v3 v6
	cas v2 v4
	cas v5 v6
	cas v3 v4
;

: heap1 0 0 0 0 0 0 0 0
: heap2 0 0 0 0 0 0 0 0

:alias val1   v8
:alias val2   v9
:alias dest   va
:alias index1 vb
:alias index2 vc

: fused-sort
	i := data
	load v7
	sort-8
	val1 := v0
	i := heap1
	save v7

	i := data
	load v7
	load v7 # cheaper than adding an offset of 8
	sort-8
	val2 := v0
	i := heap2
	save v7

	index1 := 1
	index2 := 1
	dest   := 0

: merge
	if val1 > val2 then jump merge-2
	append-1
	if index1 != 9 then jump merge
	loop
		append-2
		if dest == 16 then return
	again

: merge-2
	append-2
	if index2 != 9 then jump merge
	loop
		append-1
		if dest == 16 then return
	again

: append-1
	v0 := val1
	i := data
	i += dest
	save v0
	dest += 1

	i := heap1
	i += index1
	load v0
	val1 := v0
	index1 += 1
;

: append-2
	v0 := val2
	i := data
	i += dest
	save v0
	dest += 1

	i := heap2
	i += index2
	load v0
	val2 := v0
	index2 += 1
;

###########################################
#
#  Usage Example
#
###########################################

: data  14 5 15 6 1 3 10 7 0 9 11 4 2 13 8 12

: main
	fused-sort
	i := data
	load vf
	:breakpoint sort-complete
;
